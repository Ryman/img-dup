//! As a library crate, `img_dup` provides tools for searching for images, hashing them in
//! parallel, and collating their hashes to find near or complete duplicates.
//!
//!

extern crate "rustc-serialize" as serialize;
extern crate img_hash;

mod img;
mod processing;

use img_hash::HashType;

pub use img::UniqueImage;
pub use processing::{
    ImgResults,
    ProcessingError,
};

use std::borrow::ToOwned;
use std::fs::{self, DirEntry, PathExt};
use std::io;
use std::path::{AsPath, Path, PathBuf};
use std::thread::Thread;

macro_rules! setter {
    ($field:ident: $field_ty:ty) => (
        /// Set this field on `self`, returning `self` for method chaining.
        pub fn $field(&mut self, $field: $field_ty) -> &mut $ty {
            self.$field = $field;
            self
        }
    )
}

pub static DEFAULT_EXTS: &[&str] = &["jpg", "png", "gif"];

/// A helper struct for searching for image files within a directory.
pub struct ImageSearch<'a> {
    /// The directory to search
    pub dir: &'a Path,
    /// If the search should be recursive (visit subdirectories)
    pub recursive: bool,
    /// The extensions to match.
    pub exts: Vec<&'a str>,
}

impl ImageSearch {
    /// Initiate a search builder with the base search directory.
    /// Starts with a copy of `DEFAULT_EXTS` for the list of file extensions,
    /// and `recursive` set to `false`.
    pub fn with_dir<P: AsPath>(dir: &P) -> ImageSearch<'a> {
        ImageSearch {
            dir: dir.as_path(),
            recurse: false,
            exts: DEFAULT_EXTS.to_owned(),
        }
    }

    setter! { recursive: bool }

    /// Add an extension to the list on `self`,
    /// returning `self` for method chaining
    pub fn ext(&mut self, ext: &str) -> &mut ImageSearch<'a> {
        self.exts.push(ext);
        self
    }

    /// Add all the extensions from `exts` to `self,
    /// returning `self` for method chaining
    pub fn exts(&mut self, exts: &[&str]) -> &mut ImageSearch<'a> {
        self.exts.push_all(exts.iter());
        self
    }

    /// Create an iterator that searches `self.dir` for images with extensions contained in `self.exts`,
    /// recursing into subdirectories if `self.recursive` is set to `true`.
    ///
    /// Any I/O errors during searching are safely filtered out.
    pub fn search(mut self) -> io::Result<Box<Iterator<Item=PathBuf>>> {
        /// Generic to permit code reuse
        fn do_filter<I: Iterator<Item=io::Result<DirEntry>>(mut iter: I, exts: &[&str] 
        -> Box<Iterator<Item=PathBuf>> {
            Box::new(
                iter.filter_map(Result::ok)
                    .map(DirEntry::path)
                    .filter(|path|
                        path.extension()
                            .map(|ext| exts.contains(ext))
                            .unwrap_or(false)
                    )
            )
        }

        match self.recursive {
            false => do_filter(try!(fs::read_dir(self.dir))),
            true => do_filter(try!(fs::walk_dir(self.dir))),
        }
    }
}


pub const DEAFULT_HASH_SIZE: u32 = 16;
pub const DEFAULT_HASH_TYPE: HashType = HashType::Gradient;
pub const DEFAULT_THRESHOLD: f32 = 0.03;

/// A builder struct for bootstrapping an `img_dup` session.
pub struct SessionBuilder {

    /// The images to hash and compare.
    pub images: Vec<PathBuf>,

    /// The size of the hash to use.
    ///
    /// See the `HashType` documentation for the actual size 
    /// of a hash generated by each hash type.
    pub hash_size: u32,

    /// The type of the hash to use. See `HashType` for more information.
    pub hash_type: HashType,

    /// The percent (%) difference an image has to be from all others 
    /// to count as unique, expressed as a decimal.
    ///
    /// E.g. a 3% threshold should be set as `0.03`.
    pub threshold: f32,
}

impl SessionBuilder {
    /// Construct a `SessionBuilder` instance from the vector of paths,
    /// supplying values from the `DEFAULT_*` constants for the other fields.
    ///
    /// To search for images, use the `ImageSearch` struct.
    pub fn from_images<I: Iterator<Item=PathBuf>>(images: I) -> SessionBuilder {
        SessionBuilder {
            images: images.collect(),
            hash_size: DEAFULT_HASH_SIZE,
            hash_type: DEFAULT_HASH_TYPE,
            threshold: DEFAULT_THRESHOLD,
        }
    }

    setter! { hash_size: u32 }
    setter! { hash_type: HashType }
    setter! { threshold: f32 }

    /// Spawn an `img_dup` session, using `threads` if supplied,
    /// or the number of CPUs as reported by the OS otherwise (recommended).
    ///
    /// ### Note
    /// Regardless of the `threads` value, an additional thread will be used for result collation.
    ///
    /// If processing on a single background thread is preferred, use `spawn_background` instead.
    ///
    /// If you're going to be waiting for the result anyways, use `spawn_wait`, which spawns
    /// multiple processing threads but performs collation locally..
    ///
    /// ### Panics
    /// If `threads` is `Some(value)` and `value == 0`.
    ///
    /// If `threads` is `None` and this method panics, then for some reason `std::os::num_cpus()`
    /// returned 0, which is probably bad.
    pub fn spawn_multithread(self, threads: Option<usize>) -> Session {
        let threads = threads.unwrap_or_else(std::os::num_cpus);
        assert!(threads > 0, "If `threads` is supplied, it must be nonzero!");

        
    }

    /// Spawn an `img_dup` session which performs all the processing and collation 
    /// on a single background thread.
    ///
    /// Not recommended unless you only want to spawn one thread but don't want to block
    /// in the current one.
    pub fn spawn_background(self) -> Session {

    }

    /// Perform the processing in the background but collating in the current thread, 
    /// and return the result when it is ready.
    ///
    /// See `spawn_multithread` for more information on the `threads` parameter.
    ///
    /// ### Panics
    /// If `threads` is `Some(value)` and `value == 0`.    
    ///
    /// If `threads` is `None` and this method panics, then for some reason `std::os::num_cpus()`
    /// returned 0, which is probably bad.
    pub fn spawn_wait(self, threads: Option<usize>) -> {
    
    }

    /// Do all the processing and collation on the current thread and return the result directly.
    ///
    /// **Not** recommended unless avoiding extra threads altogether is somehow desirable.
    pub fn process_serial(self) -> ImgResults {
    
    } 
}

pub struct Session {
    background: JoinGuard<'static, 


}


