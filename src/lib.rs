//! As a library crate, `img_dup` provides tools for searching for images, hashing them in
//! parallel, and collating their hashes to find near or complete duplicates.
//!
//!

extern crate "rustc-serialize" as serialize;
extern crate img_hash;
extern crate image;

mod img;

use img::ImageManager;

pub use img::{
    Image,
    SimilarImage,
    UniqueImage
};

use img_hash::{HashType, ImageHash};

use image::{DynamicImage, GenericImage, ImageError};

use std::ascii::AsciiExt;
use std::borrow::ToOwned;
use std::boxed::BoxAny;
use std::fs::{self, DirEntry, PathExt};
use std::io;
use std::path::{AsPath, Path, PathBuf};
use std::rt::unwind::try;
use std::sync::Arc;
use std::sync::atomic::AtomicUsize;
use std::sync::atomic::Ordering::Relaxed;
use std::sync::mpsc::{channel, Receiver};
use std::time::Duration;
use std::thread;



pub static DEFAULT_EXTS: &'static [&'static str] = &["jpg", "png", "gif"];

/// A helper struct for searching for image files within a directory.
pub struct ImageSearch<'a> {
    /// The directory to search
    pub dir: &'a Path,
    /// If the search should be recursive (visit subdirectories)
    pub recursive: bool,
    /// The extensions to match.
    pub exts: Vec<&'a str>,
}

impl<'a> ImageSearch<'a> {
    /// Initiate a search builder with the base search directory.
    /// Starts with a copy of `DEFAULT_EXTS` for the list of file extensions,
    /// and `recursive` set to `false`.
    pub fn with_dir<P: AsPath>(dir: &'a P) -> ImageSearch<'a> {
        ImageSearch {
            dir: dir.as_path(),
            recursive: false,
            exts: DEFAULT_EXTS.to_owned(),
        }
    }

    pub fn recursive(&mut self, recursive: bool) -> &mut ImageSearch<'a> {
        self.recursive = recursive;
        self
    }

    /// Add an extension to the list on `self`,
    /// returning `self` for method chaining
    pub fn ext(&mut self, ext: &'a str) -> &mut ImageSearch<'a> {
        self.exts.push(ext);
        self
    }

    /// Add all the extensions from `exts` to `self,
    /// returning `self` for method chaining
    pub fn exts(&mut self, exts: &[&'a str]) -> &mut ImageSearch<'a> {
        self.exts.push_all(exts);
        self
    }

    /// Searche `self.dir` for images with extensions contained in `self.exts`,
    /// recursing into subdirectories if `self.recursive` is set to `true`.
    ///
    /// Returns a vector of all found images as paths.
    ///
    /// Any I/O errors during searching are safely filtered out.
    pub fn search(mut self) -> io::Result<Vec<PathBuf>> {
        /// Generic to permit code reuse
        fn do_filter<I: Iterator<Item=io::Result<DirEntry>>>(mut iter: I, exts: &[&str]) -> Vec<PathBuf> {
                iter.filter_map(|res| res.ok())
                    .map(|entry| entry.path())
                    .filter(|path|
                        path.extension()
                            .and_then(|s| s.to_str())
                            .map(|ext| exts.contains(&ext))
                            .unwrap_or(false)
                    )
                    .collect()
        }

        // `match` instead of `if` for clarity
        let paths = match self.recursive {
            false => do_filter(try!(fs::read_dir(self.dir)), &self.exts),
            true => do_filter(try!(fs::walk_dir(self.dir)), &self.exts),
        };

        Ok(paths)
    }
}

pub const DEAFULT_HASH_SIZE: u32 = 16;
pub const DEFAULT_HASH_TYPE: HashType = HashType::Gradient;
pub const DEFAULT_THRESHOLD: f32 = 0.03;

/// A builder struct for bootstrapping an `img_dup` session.
pub struct SessionBuilder {

    /// The images to hash and compare.
    pub images: Vec<PathBuf>,

    /// The size of the hash to use.
    ///
    /// See the `HashType` documentation for the actual size
    /// of a hash generated by each hash type.
    pub hash_size: u32,

    /// The type of the hash to use. See `HashType` for more information.
    pub hash_type: HashType,

    /// The percent (%) difference an image has to be from all others
    /// to count as unique, expressed as a decimal.
    ///
    /// E.g. a 3% threshold should be set as `0.03`.
    pub threshold: f32,
}

macro_rules! setter {
    ($field:ident: $field_ty:ty) => (
        /// Set this field on `self`, returning `self` for method chaining.
        pub fn $field<'a>(&'a mut self, $field: $field_ty) -> &mut Self {
            self.$field = $field;
            self
        }
    )
}

impl SessionBuilder {
    /// Construct a `SessionBuilder` instance from the vector of paths,
    /// supplying values from the `DEFAULT_*` constants for the other fields.
    ///
    /// To search for images, use the `ImageSearch` struct.
    pub fn from_images(images: Vec<PathBuf>) -> SessionBuilder {
        SessionBuilder {
            images: images,
            hash_size: DEAFULT_HASH_SIZE,
            hash_type: DEFAULT_HASH_TYPE,
            threshold: DEFAULT_THRESHOLD,
        }
    }

    setter! { hash_size: u32 }
    setter! { hash_type: HashType }
    setter! { threshold: f32 }

    /// Spawn an `img_dup` session, using `threads` if supplied,
    /// or the number of CPUs as reported by the OS otherwise (recommended).
    ///
    /// ### Note
    /// Regardless of the `threads` value, an additional thread will be used for result collation.
    ///
    /// If processing on a single background thread is preferred, use `spawn_background` instead.
    ///
    /// If you're going to be waiting for the result anyways, use `spawn_wait`, which spawns
    /// multiple processing threads but performs collation in the current thread.
    ///
    /// ### Panics
    /// If `threads` is `Some(value)` and `value == 0`.
    ///
    /// If `threads` is `None` and this method panics, then for some reason `std::os::num_cpus()`
    /// returned 0, which is probably bad.
    pub fn spawn_multithread(self, threads: Option<usize>) -> Session {
        let threads = threads.unwrap_or_else(std::os::num_cpus);
        assert!(threads > 0, "If `threads` is supplied, it must be nonzero!");


    }

    /// Spawn an `img_dup` session which performs all the processing and collation
    /// on a single background thread.
    ///
    /// Not recommended unless you only want to spawn one thread but don't want to block
    /// in the current one.
    pub fn process_background(self) -> Session {

    }

    /// Perform the processing in the background but collate in the current thread,
    /// and return the result when it is ready.
    ///
    /// See `spawn_multithread` for more information on the `threads` parameter.
    ///
    /// ### Panics
    /// If `threads` is `Some(value)` and `value == 0`.
    ///
    /// If `threads` is `None` and this method panics, then for some reason `std::os::num_cpus()`
    /// returned 0, which is probably bad.
    pub fn spawn_wait(self, threads: Option<usize>) -> ImgResults {

    }

    /// Do all the processing and collation on the current thread and return the result directly.
    ///
    /// **Not** recommended unless avoiding extra threads altogether is somehow desirable.
    pub fn process_local(self) -> ImgResults {

    }

    fn recombine(self) -> (HashSettings, Vec<PathBuf>) {
        let hash_settings = HashSettings {
            hash_size: self.hash_size,
            hash_type: self.hash_type,
            threshold: self.threshold,
        };

        (hash_settings, self.images)
    }
}

pub struct Session {
    background: JoinGuard<'static, ImgResults>,
    pub total: usize,
    pub status: RunningStatus,
}

impl Session {
    fn process_multithread(threads: Option<usize>, settings: HashSettings, images: Vec<PathBuf>) -> Self {

    }

    fn process_background(settings: HashSettings, image: Vec<PathBuf>) {

    }
}

#[derive(Clone)]
pub struct RunningStatus {
    done: Arc<AtomicUsize>,
    errors: Arc<AtomicUsize>,
}

impl RunningStatus {
    fn new() -> Self {
        RunningStatus {
            done: Arc::new(AtomicUsize::new(0)),
            errors: Arc::new(AtomicUsize::new(0)),
        }
    }

    pub fn done(&self) -> usize {
        self.done.load(Relaxed)
    }

    pub fn errors(&self) -> usize {
        self.errors.load(Relaxed)
    }

    pub fn total(&self) -> usize {
        self.done() + self.errors()
    }

    fn add_done(&self) {
        self.done.fetch_add(1, Relaxed);
    }

    fn add_error(&self) {
        self.errors.fetch_add(1, Relaxed);
    }
}

#[derive(Clone)]
struct ParQueue {
    vec: Arc<Vec<PathBuf>>,
    curr: Arc<AtomicUsize>,
}

impl ParQueue {
    fn from_vec(vec: Vec<PathBuf>) -> ParQueue {
        ParQueue {
            vec: Arc::new(vec),
            curr: Arc::new(AtomicUsize::new(0)),
        }
    }

    fn next<'a>(&'a self) -> Option<&'a Path> {
        let idx = self.curr.fetch_add(1, Relaxed);
        self.vec.get(idx).map(|pathbuf| &**pathbuf)
    }
}

pub struct ImgResults {
    pub uniques: Vec<UniqueImage>,
    pub errors: Vec<ImgDupError>,
}

#[derive(Copy)]
struct HashSettings {
    hash_size: u32,
    hash_type: HashType,
    threshold: f32,
}


type ImageResult = ImgDupResult<Image>;

fn spawn_threads(threads: usize, settings: HashSettings, paths: Vec<PathBuf>) -> Receiver<ImageResult> {
    let queue = ParQueue::from_vec(paths);

    let (tx, rx) = channel();

    for _ in range(0, threads) {
        let task_tx = tx.clone();
        let mut task_queue = queue.clone();

        Thread::spawn(move || {
            while let Some(path) = task_queue.next() {
                let img_result = load_and_hash_image(settings, path);

                if task_tx.send(img_result).is_err() { break; }
            }
        });
    }

    rx
}

fn collect_images(rx: Receiver<ImageResult>, threshold: f32, status: Option<RunningStatus>) -> ImgResults {
    let mut manager = ImageManager::new(threshold);
    let mut errors = Vec::new();

    for img_result in rx.iter() {
        match img_result {
            Ok(image) => {
                manager.add_image(image);
                status.as_ref().map(RunningStatus::add_done);
            },
            Err(img_err) => {
                errors.push(img_err);
                status.as_ref().map(RunningStatus::add_error);
            }
        }
    }

    ImgResults {
        uniques: manager.into_vec(),
        errors: errors,
    }
}

pub type ImgDupResult<T> = Result<T, ImgDupError>;

pub enum ImgDupError {
    LoadingErr(PathBuf, ImageError),
    LoadingPanic(PathBuf, String),
    HashingPanic(PathBuf, String),
}

fn load_and_hash_image(settings: HashSettings, path: &Path) -> ImgDupResult<Image> {
    let (image, load_time) = try!(try_load_image(path));

    let (hash, hash_time) = match try_hash_image(&image, settings) {
        Ok(ok) => ok,
        Err(cause) => return Err(ImgDupError::HashingPanic(path.to_path_buf(), cause)),
    };

    Ok(
        Image {
            path: path.to_path_buf(),
            hash: hash,
            dimensions: image.dimensions(),
            load_time: load_time,
            hash_time: hash_time,
        }
    )
}

fn try_fn<T, F: FnOnce() -> T>(f: F) -> Result<T, String> {
    let mut maybe: Option<T> = None;

    let err = unsafe { try(|| maybe = Some(f())) };

    match maybe {
        Some(val) => Ok(val),
        None => Err(err.unwrap_err().downcast().unwrap()),
    }
}

fn duration_with_val<T, F: FnOnce() -> T>(f: F) -> (T, Duration) {
    let mut opt_val: Option<T> = None;
    let duration = Duration::span(|| opt_val = Some(f()));
    (opt_val.unwrap(), duration)
}

fn try_load_image(path: &Path) -> ImgDupResult<(DynamicImage, Duration)> {
    let (image, load_time) =  duration_with_val(|| try_fn(|| image::open(&path)));

    match image {
        Ok(Ok(image)) => Ok((image, load_time)),
        Ok(Err(img_err)) => Err(ImgDupError::LoadingErr(path.to_path_buf(), img_err)),
        Err(cause) => Err(ImgDupError::LoadingPanic(path.to_path_buf(), cause)),
    }
}

fn try_hash_image(img: &DynamicImage, settings: HashSettings) -> Result<(ImageHash, Duration), String> {
    let HashSettings { hash_size, hash_type, .. }  = settings;
    let (hash, hash_time) = duration_with_val(|| try_fn(|| ImageHash::hash(img, hash_size, hash_type)));
    let hash = try!(hash);

    Ok((hash, hash_time))
}
